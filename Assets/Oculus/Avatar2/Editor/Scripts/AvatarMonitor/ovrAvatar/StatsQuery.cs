// <auto-generated>
//  automatically @generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ovrAvatar.Arbiter
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct NetworkStatsPacket : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static NetworkStatsPacket GetRootAsNetworkStatsPacket(ByteBuffer _bb) { return GetRootAsNetworkStatsPacket(_bb, new NetworkStatsPacket()); }
  public static NetworkStatsPacket GetRootAsNetworkStatsPacket(ByteBuffer _bb, NetworkStatsPacket obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NetworkStatsPacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Period { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool MutatePeriod(float period) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutFloat(o + __p.bb_pos, period); return true; } else { return false; } }
  public long DownloadTotalBytes { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool MutateDownloadTotalBytes(long download_total_bytes) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutLong(o + __p.bb_pos, download_total_bytes); return true; } else { return false; } }
  public long DownloadSpeed { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool MutateDownloadSpeed(long download_speed) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutLong(o + __p.bb_pos, download_speed); return true; } else { return false; } }
  public long TotalRequests { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool MutateTotalRequests(long total_requests) { int o = __p.__offset(10); if (o != 0) { __p.bb.PutLong(o + __p.bb_pos, total_requests); return true; } else { return false; } }
  public long ActiveRequests { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool MutateActiveRequests(long active_requests) { int o = __p.__offset(12); if (o != 0) { __p.bb.PutLong(o + __p.bb_pos, active_requests); return true; } else { return false; } }

  public static Offset<ovrAvatar.Arbiter.NetworkStatsPacket> CreateNetworkStatsPacket(FlatBufferBuilder builder,
      float period = 0.0f,
      long download_total_bytes = 0,
      long download_speed = 0,
      long total_requests = 0,
      long active_requests = 0) {
    builder.StartTable(5);
    NetworkStatsPacket.AddActiveRequests(builder, active_requests);
    NetworkStatsPacket.AddTotalRequests(builder, total_requests);
    NetworkStatsPacket.AddDownloadSpeed(builder, download_speed);
    NetworkStatsPacket.AddDownloadTotalBytes(builder, download_total_bytes);
    NetworkStatsPacket.AddPeriod(builder, period);
    return NetworkStatsPacket.EndNetworkStatsPacket(builder);
  }

  public static void StartNetworkStatsPacket(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddPeriod(FlatBufferBuilder builder, float period) { builder.AddFloat(0, period, 0.0f); }
  public static void AddDownloadTotalBytes(FlatBufferBuilder builder, long downloadTotalBytes) { builder.AddLong(1, downloadTotalBytes, 0); }
  public static void AddDownloadSpeed(FlatBufferBuilder builder, long downloadSpeed) { builder.AddLong(2, downloadSpeed, 0); }
  public static void AddTotalRequests(FlatBufferBuilder builder, long totalRequests) { builder.AddLong(3, totalRequests, 0); }
  public static void AddActiveRequests(FlatBufferBuilder builder, long activeRequests) { builder.AddLong(4, activeRequests, 0); }
  public static Offset<ovrAvatar.Arbiter.NetworkStatsPacket> EndNetworkStatsPacket(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ovrAvatar.Arbiter.NetworkStatsPacket>(o);
  }
  public NetworkStatsPacketT UnPack() {
    var _o = new NetworkStatsPacketT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(NetworkStatsPacketT _o) {
    _o.Period = this.Period;
    _o.DownloadTotalBytes = this.DownloadTotalBytes;
    _o.DownloadSpeed = this.DownloadSpeed;
    _o.TotalRequests = this.TotalRequests;
    _o.ActiveRequests = this.ActiveRequests;
  }
  public static Offset<ovrAvatar.Arbiter.NetworkStatsPacket> Pack(FlatBufferBuilder builder, NetworkStatsPacketT _o) {
    if (_o == null) return default(Offset<ovrAvatar.Arbiter.NetworkStatsPacket>);
    return CreateNetworkStatsPacket(
      builder,
      _o.Period,
      _o.DownloadTotalBytes,
      _o.DownloadSpeed,
      _o.TotalRequests,
      _o.ActiveRequests);
  }
};

public class NetworkStatsPacketT
{
  public float Period { get; set; }
  public long DownloadTotalBytes { get; set; }
  public long DownloadSpeed { get; set; }
  public long TotalRequests { get; set; }
  public long ActiveRequests { get; set; }

  public NetworkStatsPacketT() {
    this.Period = 0.0f;
    this.DownloadTotalBytes = 0;
    this.DownloadSpeed = 0;
    this.TotalRequests = 0;
    this.ActiveRequests = 0;
  }
}

public struct MemoryStatsPacket : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MemoryStatsPacket GetRootAsMemoryStatsPacket(ByteBuffer _bb) { return GetRootAsMemoryStatsPacket(_bb, new MemoryStatsPacket()); }
  public static MemoryStatsPacket GetRootAsMemoryStatsPacket(ByteBuffer _bb, MemoryStatsPacket obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MemoryStatsPacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Period { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool MutatePeriod(float period) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutFloat(o + __p.bb_pos, period); return true; } else { return false; } }
  public long CurrBytesUsed { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool MutateCurrBytesUsed(long curr_bytes_used) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutLong(o + __p.bb_pos, curr_bytes_used); return true; } else { return false; } }
  public long CurrAllocationCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool MutateCurrAllocationCount(long curr_allocation_count) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutLong(o + __p.bb_pos, curr_allocation_count); return true; } else { return false; } }
  public long MaxBytesUsed { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool MutateMaxBytesUsed(long max_bytes_used) { int o = __p.__offset(10); if (o != 0) { __p.bb.PutLong(o + __p.bb_pos, max_bytes_used); return true; } else { return false; } }
  public long MaxAllocationCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool MutateMaxAllocationCount(long max_allocation_count) { int o = __p.__offset(12); if (o != 0) { __p.bb.PutLong(o + __p.bb_pos, max_allocation_count); return true; } else { return false; } }
  public long TotalBytesUsed { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool MutateTotalBytesUsed(long total_bytes_used) { int o = __p.__offset(14); if (o != 0) { __p.bb.PutLong(o + __p.bb_pos, total_bytes_used); return true; } else { return false; } }
  public long TotalAllocationCount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool MutateTotalAllocationCount(long total_allocation_count) { int o = __p.__offset(16); if (o != 0) { __p.bb.PutLong(o + __p.bb_pos, total_allocation_count); return true; } else { return false; } }

  public static Offset<ovrAvatar.Arbiter.MemoryStatsPacket> CreateMemoryStatsPacket(FlatBufferBuilder builder,
      float period = 0.0f,
      long curr_bytes_used = 0,
      long curr_allocation_count = 0,
      long max_bytes_used = 0,
      long max_allocation_count = 0,
      long total_bytes_used = 0,
      long total_allocation_count = 0) {
    builder.StartTable(7);
    MemoryStatsPacket.AddTotalAllocationCount(builder, total_allocation_count);
    MemoryStatsPacket.AddTotalBytesUsed(builder, total_bytes_used);
    MemoryStatsPacket.AddMaxAllocationCount(builder, max_allocation_count);
    MemoryStatsPacket.AddMaxBytesUsed(builder, max_bytes_used);
    MemoryStatsPacket.AddCurrAllocationCount(builder, curr_allocation_count);
    MemoryStatsPacket.AddCurrBytesUsed(builder, curr_bytes_used);
    MemoryStatsPacket.AddPeriod(builder, period);
    return MemoryStatsPacket.EndMemoryStatsPacket(builder);
  }

  public static void StartMemoryStatsPacket(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddPeriod(FlatBufferBuilder builder, float period) { builder.AddFloat(0, period, 0.0f); }
  public static void AddCurrBytesUsed(FlatBufferBuilder builder, long currBytesUsed) { builder.AddLong(1, currBytesUsed, 0); }
  public static void AddCurrAllocationCount(FlatBufferBuilder builder, long currAllocationCount) { builder.AddLong(2, currAllocationCount, 0); }
  public static void AddMaxBytesUsed(FlatBufferBuilder builder, long maxBytesUsed) { builder.AddLong(3, maxBytesUsed, 0); }
  public static void AddMaxAllocationCount(FlatBufferBuilder builder, long maxAllocationCount) { builder.AddLong(4, maxAllocationCount, 0); }
  public static void AddTotalBytesUsed(FlatBufferBuilder builder, long totalBytesUsed) { builder.AddLong(5, totalBytesUsed, 0); }
  public static void AddTotalAllocationCount(FlatBufferBuilder builder, long totalAllocationCount) { builder.AddLong(6, totalAllocationCount, 0); }
  public static Offset<ovrAvatar.Arbiter.MemoryStatsPacket> EndMemoryStatsPacket(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ovrAvatar.Arbiter.MemoryStatsPacket>(o);
  }
  public MemoryStatsPacketT UnPack() {
    var _o = new MemoryStatsPacketT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MemoryStatsPacketT _o) {
    _o.Period = this.Period;
    _o.CurrBytesUsed = this.CurrBytesUsed;
    _o.CurrAllocationCount = this.CurrAllocationCount;
    _o.MaxBytesUsed = this.MaxBytesUsed;
    _o.MaxAllocationCount = this.MaxAllocationCount;
    _o.TotalBytesUsed = this.TotalBytesUsed;
    _o.TotalAllocationCount = this.TotalAllocationCount;
  }
  public static Offset<ovrAvatar.Arbiter.MemoryStatsPacket> Pack(FlatBufferBuilder builder, MemoryStatsPacketT _o) {
    if (_o == null) return default(Offset<ovrAvatar.Arbiter.MemoryStatsPacket>);
    return CreateMemoryStatsPacket(
      builder,
      _o.Period,
      _o.CurrBytesUsed,
      _o.CurrAllocationCount,
      _o.MaxBytesUsed,
      _o.MaxAllocationCount,
      _o.TotalBytesUsed,
      _o.TotalAllocationCount);
  }
};

public class MemoryStatsPacketT
{
  public float Period { get; set; }
  public long CurrBytesUsed { get; set; }
  public long CurrAllocationCount { get; set; }
  public long MaxBytesUsed { get; set; }
  public long MaxAllocationCount { get; set; }
  public long TotalBytesUsed { get; set; }
  public long TotalAllocationCount { get; set; }

  public MemoryStatsPacketT() {
    this.Period = 0.0f;
    this.CurrBytesUsed = 0;
    this.CurrAllocationCount = 0;
    this.MaxBytesUsed = 0;
    this.MaxAllocationCount = 0;
    this.TotalBytesUsed = 0;
    this.TotalAllocationCount = 0;
  }
}

public struct TaskStatsPacket : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TaskStatsPacket GetRootAsTaskStatsPacket(ByteBuffer _bb) { return GetRootAsTaskStatsPacket(_bb, new TaskStatsPacket()); }
  public static TaskStatsPacket GetRootAsTaskStatsPacket(ByteBuffer _bb, TaskStatsPacket obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TaskStatsPacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Period { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool MutatePeriod(float period) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutFloat(o + __p.bb_pos, period); return true; } else { return false; } }
  public uint Histogram(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int HistogramLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetHistogramBytes() { return __p.__vector_as_span<uint>(6, 4); }
#else
  public ArraySegment<byte>? GetHistogramBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public uint[] GetHistogramArray() { return __p.__vector_as_array<uint>(6); }
  public bool MutateHistogram(int j, uint histogram) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutUint(__p.__vector(o) + j * 4, histogram); return true; } else { return false; } }
  public int Pending { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutatePending(int pending) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, pending); return true; } else { return false; } }

  public static Offset<ovrAvatar.Arbiter.TaskStatsPacket> CreateTaskStatsPacket(FlatBufferBuilder builder,
      float period = 0.0f,
      VectorOffset histogramOffset = default(VectorOffset),
      int pending = 0) {
    builder.StartTable(3);
    TaskStatsPacket.AddPending(builder, pending);
    TaskStatsPacket.AddHistogram(builder, histogramOffset);
    TaskStatsPacket.AddPeriod(builder, period);
    return TaskStatsPacket.EndTaskStatsPacket(builder);
  }

  public static void StartTaskStatsPacket(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPeriod(FlatBufferBuilder builder, float period) { builder.AddFloat(0, period, 0.0f); }
  public static void AddHistogram(FlatBufferBuilder builder, VectorOffset histogramOffset) { builder.AddOffset(1, histogramOffset.Value, 0); }
  public static VectorOffset CreateHistogramVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateHistogramVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartHistogramVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPending(FlatBufferBuilder builder, int pending) { builder.AddInt(2, pending, 0); }
  public static Offset<ovrAvatar.Arbiter.TaskStatsPacket> EndTaskStatsPacket(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ovrAvatar.Arbiter.TaskStatsPacket>(o);
  }
  public TaskStatsPacketT UnPack() {
    var _o = new TaskStatsPacketT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TaskStatsPacketT _o) {
    _o.Period = this.Period;
    _o.Histogram = new List<uint>();
    for (var _j = 0; _j < this.HistogramLength; ++_j) {_o.Histogram.Add(this.Histogram(_j));}
    _o.Pending = this.Pending;
  }
  public static Offset<ovrAvatar.Arbiter.TaskStatsPacket> Pack(FlatBufferBuilder builder, TaskStatsPacketT _o) {
    if (_o == null) return default(Offset<ovrAvatar.Arbiter.TaskStatsPacket>);
    var _histogram = default(VectorOffset);
    if (_o.Histogram != null) {
      var __histogram = _o.Histogram.ToArray();
      _histogram = CreateHistogramVector(builder, __histogram);
    }
    return CreateTaskStatsPacket(
      builder,
      _o.Period,
      _histogram,
      _o.Pending);
  }
};

public class TaskStatsPacketT
{
  public float Period { get; set; }
  public List<uint> Histogram { get; set; }
  public int Pending { get; set; }

  public TaskStatsPacketT() {
    this.Period = 0.0f;
    this.Histogram = null;
    this.Pending = 0;
  }
}


}
